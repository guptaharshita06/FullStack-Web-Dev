# Day 9 – Theory File (Production-Ready Registration Form + Regex Validations + Toast Message)

────────────────────────────────────────────
📄 HTML STRUCTURE (index.html)
────────────────────────────────────────────

- <form id="registrationForm">
  - The main container to hold all user input fields.
  - Uses 'submit' event in JavaScript to validate data.

- Input Fields:
  - Full Name, Email, Phone, Password, Confirm Password:
    • All have corresponding IDs for easy JavaScript access.
    • 'required' ensures no field is left empty.
    • 'placeholder' gives users a hint about expected input.

- Select Fields:
  - Gender and City dropdowns.
  - A special "Other" option in City dynamically reveals an input field for custom city name.

- Checkbox:
  - A checkbox for accepting Terms & Conditions.
  - Mandatory for successful form submission.

- <div id="otherCityContainer">
  - Hidden by default.
  - Shown only if user selects "Other" in the City dropdown.

- <div class="toast success" id="successPopup">
  - Custom div styled to show a temporary success message (like a toast).
  - Appears for 3 seconds after successful validation.

────────────────────────────────────────────
🎨 CSS STYLING (style.css)
────────────────────────────────────────────

- General Styles:
  - Used Flexbox for centering form.
  - Inputs and selects styled with consistent padding and border-radius.

- Validation Classes:
  - .success → Green border for valid input.
  - .error   → Red border for invalid input.

- Toast Styling:
  - #successPopup:
    • Initially hidden.
    • Fixed at the bottom center.
    • Smooth fade-in animation using `transform` and `opacity`.

- Responsive Design:
  - Max-width and margin used to keep form centered and readable.

────────────────────────────────────────────
🧠 JAVASCRIPT LOGIC (script.js)
────────────────────────────────────────────

🔹 1. DOM SELECTION:
- form = document.getElementById("registrationForm")
- All input fields and select dropdowns are selected using `getElementById`.

🔹 2. VALIDATION FUNCTIONS (Using Regex):
- validateName(name): Ensures only letters and at least 2 characters.
- validateEmail(email): Checks for valid email pattern using regex.
- validatePhone(phone): Must be a 10-digit number.
- validatePassword(password): Must be 8+ chars, include uppercase, lowercase, number, special char.
- validateConfirmPassword(p1, p2): Checks if both passwords match.
- validateSelect(field): Ensures dropdowns are not empty.

🔹 3. PASSWORD STRENGTH METER:
- Runs on `input` event.
- Uses regex checks for:
  • Uppercase
  • Lowercase
  • Number
  • Special Character
  • Minimum Length
- Displays strength as Weak, Medium, or Strong with color-coded feedback.

🔹 4. CITY "OTHER" FIELD TOGGLE:
- When user selects "Other" in City dropdown, another input field is shown.
- Controlled using `change` event and conditional CSS display.

🔹 5. FINAL FORM SUBMISSION:
- On submit:
  - All fields are validated.
  - If valid:
    • Shows success toast (#successPopup).
    • Resets form.
    • Clears input styles and messages.
  - If invalid:
    • Shows red border and error messages using `showError`.

────────────────────────────────────────────
📚 CONCEPTS USED
────────────────────────────────────────────
- HTML Forms and Input Elements
- CSS Flexbox & Animations
- JavaScript:
    • DOM Manipulation
    • Form Validation with Regex
    • Real-time Input Feedback
    • Event Handling (submit, input, change)
    • Conditional Element Display
    • Toast Message Simulation
    • Password Strength Checker

────────────────────────────────────────────
🎁 BONUS FEATURES
────────────────────────────────────────────
- Live password strength checker (auto-updating as user types)
- Dynamic "Other" city input field
- Toast success message on submission
- Clean user feedback with green/red input borders
- Fully responsive and production-ready UI
