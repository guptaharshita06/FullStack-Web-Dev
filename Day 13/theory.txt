üìò Day 13 - Backend with Node.js, Express & PostgreSQL | API Testing using Postman

------------------------------------------------------
üî∏ PART 1: What is Node.js?
------------------------------------------------------
Node.js ek runtime environment hai jisme JavaScript ko browser ke bahar run kar sakte hain.

- Asynchronous & non-blocking I/O
- Single-threaded but fast for I/O tasks
- Ideal for building APIs and servers

‚öôÔ∏è Basic Commands:
- `node filename.js` ‚Äî File run karne ke liye
- `npm init -y` ‚Äî Node project initialize karna
- `npm install package-name` ‚Äî Package install karna

------------------------------------------------------
üî∏ PART 2: What is Express.js?
------------------------------------------------------
Express ek lightweight Node.js framework hai jo APIs banane ke liye use hota hai.

‚öôÔ∏è Basic Usage:
```js
const express = require("express");
const app = express();
app.use(express.json());
```

‚úÖ Features:
- Routing (GET, POST, PUT, DELETE)
- Middleware support
- Fast API development

------------------------------------------------------
üî∏ PART 3: PostgreSQL Overview
------------------------------------------------------
PostgreSQL ek open-source RDBMS (Relational Database) hai.

üß± Concepts:
- Table ‚Äî Data store karne ke liye
- Rows ‚Äî Records
- Columns ‚Äî Fields like `name`, `email`

‚öôÔ∏è CLI Commands:
- `psql -U postgres` ‚Äî Login to DB
- `\l` ‚Äî List all databases
- `\c dbname` ‚Äî Connect to a DB
- `\dt` ‚Äî Show tables
- `SELECT * FROM table;` ‚Äî View data

------------------------------------------------------
üî∏ PART 4: Connecting Node.js to PostgreSQL
------------------------------------------------------
Use `pg` package for PostgreSQL connectivity:

1. Install:
```bash
npm install pg dotenv
```

2. Create `.env`:
```env
DB_HOST=localhost
DB_PORT=5432
DB_USER=postgres
DB_PASSWORD=yourpassword
DB_NAME=yourdbname
```

3. `db.js`:
```js
const { Pool } = require("pg");
require("dotenv").config();

const pool = new Pool({
  host: process.env.DB_HOST,
  port: process.env.DB_PORT,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
});

module.exports = pool;
```

------------------------------------------------------
üî∏ PART 5: Using Postman to Test APIs
------------------------------------------------------

‚úÖ Steps:
1. Open Postman
2. Select method: `POST` or `GET`
3. For `POST`, choose **Body ‚Üí raw ‚Üí JSON**
4. Use `http://localhost:3000/students`
5. Hit **Send**

üì© JSON Body:
```json
{
  "name": "Kunal",
  "email": "kunal@example.com",
  "course": "MERN"
}
```

------------------------------------------------------
üî∏ PART 6: Final Server Code Snippets
------------------------------------------------------

‚ñ∂Ô∏è `index.js`:
```js
const express = require("express");
const pool = require("./db");
require("dotenv").config();

const app = express();
app.use(express.json());

// POST: Add Student
app.post("/students", async (req, res) => {
  const { name, email, course } = req.body;
  await pool.query("INSERT INTO students (name, email, course) VALUES ($1, $2, $3)", [name, email, course]);
  res.json({ message: "Student added successfully!" });
});

// GET: Fetch All Students
app.get("/students", async (req, res) => {
  const result = await pool.query("SELECT * FROM students");
  res.json(result.rows);
});

app.listen(3000, () => {
  console.log("Server running on http://localhost:3000");
});
```

üìù Notes:
- `pool.query` is async, always use `await`
- Wrap in `try...catch` for better error handling (recommended)

------------------------------------------------------
‚úÖ Summary
------------------------------------------------------
- Node.js + Express + PostgreSQL combo is powerful for APIs
- Postman makes testing simple
- Environment variables keep DB credentials secure
- Use async/await for DB calls
